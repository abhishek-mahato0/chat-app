generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  fullname  String
  username  String    @unique
  email     String    @unique
  password  String
  online    Boolean   @default(false)
  typingIn  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  salt      String

  // Relations
  messages   Message[] @relation("UserMessages")
  rooms      RoomUser[]
  friends    Friend[]   @relation("UserFriends")
  seen       Seen[]     @relation("UserSeen")
  posts      Post[]
  likes      Like[]

  Friend Friend[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String   @db.ObjectId
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author   User @relation(fields: [authorId], references: [id])
  likes    Like[]
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Room {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  isGroup   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  users      RoomUser[]
  messages   Message[] @relation("RoomMessages")

  latestMessageId String?   @db.ObjectId
  latestMessage   Message?  @relation("LatestMessage", fields: [latestMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  senderId  String    @db.ObjectId
  roomId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  sender   User   @relation("UserMessages", fields: [senderId], references: [id])
  room     Room   @relation("RoomMessages", fields: [roomId], references: [id])
  seenBy   Seen[]

  latestInRooms Room[] @relation("LatestMessage")

  RoomUser RoomUser[]
}

model RoomUser {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  roomId            String   @db.ObjectId
  userId            String   @db.ObjectId
  lastSeenMessageId String?  @db.ObjectId

  room             Room    @relation(fields: [roomId], references: [id])
  user             User    @relation(fields: [userId], references: [id])
  lastSeenMessage  Message? @relation(fields: [lastSeenMessageId], references: [id])
}

model Friend {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  friendId String @db.ObjectId

  user     User @relation("UserFriends", fields: [userId], references: [id])
  friend   User @relation(fields: [friendId], references: [id])
}

model Seen {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  messageId String @db.ObjectId

  user      User    @relation("UserSeen", fields: [userId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])
}
